h1. rspec-profiler

_Currently_ _tested_ _only_ _for_ _rspec-2.11_

The rspec-profiler overwrites the output of the default rspec profile. The rspec-profiler first groups tests together by their folder under the spec directory (models, lib, controllers, etc...). Then the standard deviation is calculated. Any test within a group that is 2 or more standard deviations away from the mean is listed.

There are downsides of course to doing it this way. For example, with a mean of .02 seconds and a standard deviation of .01 seconds, a test that takes .04 seconds will be listed when perhaps one wouldn't think a test that takes 0.04 seconds to complete to be in need of attention. I will simply advise, as with any benchmark, to not take the results too seriously. Rather, you should use the results as a way to identify tests that _may_ need to be looked at for performance issues. And, as always, running the benchmark multiple times will give you a better sense of the tests that are consistantly slow. A test may be benchmarked noticably slower in one trial due any number of reasons but run faster in the next.

h2. Installation

1. Include the rspec-profiler in your @Gemfile@

2. When running your specs use the @-p@ flag

bc. $ rspec -p spec

Alternatively, if you are not using bundler you can add to your @.rspec@ file the location of @profiler.rb@:

bc. -r <path_to_gem>/lib/profiler.rb

_Note_: When tests fail, the profile will not display which is consistant with how the bundled rspec profiler works.

_If you use Timecop_: If you use the timecop gem to freeze or change time be sure to also return the time after each of your tests. Not doing so will make it appear as if your tests are taking either far too long or have taken negative time to complete. 
